package com.example.aleppocollageimport android.annotation.SuppressLintimport android.os.Bundleimport android.util.Logimport android.view.Viewimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.app.AppCompatDelegateimport androidx.lifecycle.Observerimport androidx.navigation.NavGraphimport androidx.navigation.NavInflaterimport androidx.navigation.fragment.NavHostFragmentimport com.example.aleppocollage.network.NetworkConnectionimport com.example.aleppocollage.databinding.ActivityMainBindingimport com.example.aleppocollage.ui.network.ConnectionStateDialogimport dagger.hilt.android.AndroidEntryPointimport io.paperdb.Paper@AndroidEntryPointclass MainActivity : AppCompatActivity() {    private lateinit var binding: ActivityMainBinding    private lateinit var inflater: NavInflater    private lateinit var graph: NavGraph    private lateinit var navHostFragment: NavHostFragment    private var showDialogNetworkState = 0    companion object {        private var conn: Boolean? = null        val connectionStateDialog =            ConnectionStateDialog()    }    @SuppressLint("ResourceAsColor")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        binding = ActivityMainBinding.inflate(layoutInflater)        val view = binding.root        setContentView(view)        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)        val oneTime = Paper.book().read<Boolean>("oneTime", true)        navHostFragment =            (supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment)        inflater = navHostFragment.navController.navInflater        graph = inflater.inflate(R.navigation.mobile_navigation)        if (oneTime) {            setHomeScreen(R.id.RegisterFragment)        } else {            setHomeScreen(R.id.workStudentOrTeacherFragment)        }        NetworkConnection(this)            .observe(this, Observer {            conn = it.state            Log.d("stateConn", "${ it.state }")            if (!it.state && showDialogNetworkState == 0) {                connectionStateDialog.show(supportFragmentManager, "ConnectionStateDialog")                view.visibility = View.GONE                showDialogNetworkState = 1            } else if (it.state && showDialogNetworkState == 1) {                connectionStateDialog.dismiss()                view.visibility = View.VISIBLE                showDialogNetworkState = 0            }        })    }    fun setHomeScreen(id: Int) {        graph.startDestination = id        navHostFragment.navController.graph = graph    }}