package com.example.aleppocollage.ui.absenceStudentimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.absence.domain.Absenceimport com.example.aleppocollage.repository.absence.AbsenceRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass AbsenceStudentViewModel : ViewModel() {    private val absenceRepository = AbsenceRepository()    private val _absenceStudent = MutableLiveData<Resource<Absence>>()    val absenceStudent: LiveData<Resource<Absence>> = _absenceStudent    fun getAbsenceStudent(studentID: Int, date: String) {        viewModelScope.launch {            absenceRepository.getAbsenceStudent(studentID, date)                .onStart {                    _absenceStudent.postValue(Resource.Loading(true))                }                .catch {                    it.message?.let { message ->                        _absenceStudent.postValue(Resource.Error(message))                    }                }                .collect { _absence ->                    if (_absence == null) {                        _absenceStudent.postValue(Resource.FAILURE("name or password"))                    } else {                        _absenceStudent.postValue(Resource.Success(_absence))                    }                }        }    }}