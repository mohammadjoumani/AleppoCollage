package com.example.aleppocollage.ui.auth.login.studentimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.user.domain.Studentimport com.example.aleppocollage.repository.register.RegisterRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.*import kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass RegisterStudentViewModel @Inject constructor(    private val repository: RegisterRepository): ViewModel() {    var showPassword: MutableLiveData<Boolean> = MutableLiveData(false)    var studentDataState: MutableLiveData<DataState<Student>> = MutableLiveData()    fun setStateEvent(        registerStudentStateEvent: RegisterStudentStateEvent,        name: String? = null,        password: String? = null) {        viewModelScope.launch {            when (registerStudentStateEvent) {                is RegisterStudentStateEvent.Register -> {                    repository.getOneStudent(name!!, password!!).onEach { dataState ->                        studentDataState.value = dataState                    }.launchIn(viewModelScope)                }                is RegisterStudentStateEvent.None -> {                    studentDataState = MutableLiveData()                }            }        }    }}sealed class RegisterStudentStateEvent {    object Register : RegisterStudentStateEvent()    object None : RegisterStudentStateEvent()}