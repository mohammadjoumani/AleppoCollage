package com.example.aleppocollage.ui.auth.login.teacherimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.user.domain.Teacherimport com.example.aleppocollage.repository.register.RegisterRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.*import kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass RegisterTeacherViewModel @Inject constructor(    private val repository: RegisterRepository,) : ViewModel() {    var showPassword: MutableLiveData<Boolean> = MutableLiveData(false)    var teachersDataState: MutableLiveData<DataState<List<Teacher>>> = MutableLiveData()    fun setStateEvent(        registerTeacherStateEvent: RegisterTeacherStateEvent) {        viewModelScope.launch {            when (registerTeacherStateEvent) {                is RegisterTeacherStateEvent.GetAllTeachers -> {                    repository.getAllTeachers().onEach { dataState ->                        teachersDataState.value = dataState                    }.launchIn(viewModelScope)                }                is RegisterTeacherStateEvent.None -> {                    teachersDataState = MutableLiveData()                }            }        }    }}sealed class RegisterTeacherStateEvent {    object GetAllTeachers : RegisterTeacherStateEvent()    object None : RegisterTeacherStateEvent()}