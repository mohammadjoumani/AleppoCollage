package com.example.aleppocollage.ui.exam.teacher.getimport android.os.Bundleimport android.util.Logimport androidx.fragment.app.Fragmentimport android.view.Viewimport android.widget.AdapterViewimport android.widget.Toastimport androidx.core.content.ContextCompatimport androidx.core.view.isVisibleimport androidx.fragment.app.activityViewModelsimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentExamBindingimport com.example.aleppocollage.model.deservedgroup.domain.DeservedGroupimport com.example.aleppocollage.model.exam.domain.Examimport com.example.aleppocollage.ui.mark.student.adapter.YearSpinnerAdapterimport com.example.aleppocollage.ui.exam.teacher.get.adapter.DeservedGroupsSpinnerAdapterimport com.example.aleppocollage.ui.exam.teacher.get.adapter.ExamRecyclerAdapterimport com.example.aleppocollage.ui.main.model.ProfileInfoimport com.example.aleppocollage.ui.util.sharedviewmodel.SharedViewModelimport com.example.aleppocollage.util.Commonimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.AndroidEntryPointimport es.dmoral.toasty.Toastyimport java.util.*import kotlin.collections.ArrayList@AndroidEntryPointclass ExamFragment : Fragment(R.layout.fragment_exam) {    ///region Variables    private var year = ""    private var groupId = -1    private var subjectId = -1    private var teacherId = -1    private var years: ArrayList<String> = ArrayList()    private var groups: ArrayList<DeservedGroup> = ArrayList()    private var exams: ArrayList<Exam> = ArrayList()    private lateinit var examAdapter: ExamRecyclerAdapter    //endregion    ///region ViewModel & Binding    private val viewModel: ExamViewModel by viewModels()    private val sharedViewModel: SharedViewModel by activityViewModels()    private var _binding: FragmentExamBinding? = null    private val binding get() = _binding!!    ///endregion    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        _binding = FragmentExamBinding.bind(view)        init()        binding.apply {            spinnerTestYear.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {                override fun onNothingSelected(adapterView: AdapterView<*>?) {                }                override fun onItemSelected(                    adapterView: AdapterView<*>?, view: View?, position: Int, id: Long) {                    year = years[position] + "-" + "${years[position].toInt() + 1}"                    observeGroupDataState()                    viewModel.setGroupStateEvent(ExamStateEvent.Group, teacherId, year)                }            }            spinnerTestDepartment.onItemSelectedListener =                object : AdapterView.OnItemSelectedListener {                    override fun onNothingSelected(adapterView: AdapterView<*>?) {                    }                    override fun onItemSelected(                        adapterView: AdapterView<*>?, view: View?, position: Int, id: Long) {                        groupId = groups[position].id                        subjectId = groups[position].subjectID                    }                }            btnTestRecordTest.setOnClickListener {                Log.d("group", "$groupId $subjectId")                if (groupId == -1 || subjectId == -1) {                    Toasty.error(requireContext(), getString(R.string.strShouldSelectYearAndGroup), Toast.LENGTH_SHORT, true).show()                    return@setOnClickListener                }                observeExamDataState()                viewModel.setExamStateEvent(                    ExamStateEvent.Exam, subjectId = subjectId, groupId = groupId)            }            cardTestBack.setOnClickListener {                findNavController().navigateUp()            }            cardTestProfile.setOnClickListener {                val state = !(sharedViewModel.showProfileInfo.value!!.state)                sharedViewModel.showProfileInfo.value = ProfileInfo(userType = Common.getCurrentTypeUser(), teacher = Common.getCurrentTeacher()!!, state = state)            }        }    }    private fun init() {        teacherId = Common.getCurrentTeacher()!!.id        setYear(Common.getCurrentYear())        val adapterYear = YearSpinnerAdapter(requireContext(), years)        binding.spinnerTestYear.adapter = adapterYear        examAdapter = ExamRecyclerAdapter(exams, requireContext()) { exam -> clickExam(exam) }        initRecyclerAndAdapter()    }    private fun clickExam(exam: Exam) {        when (exam.status) {            "Delivered" -> {                val action = ExamFragmentDirections.actionExamFragmentToExamDeliveredFragment(exam, groupId)                findNavController().navigate(action)            }            "Checked" -> {                val action = ExamFragmentDirections.actionExamFragmentToExamCheckedFragment(groupId, exam)                findNavController().navigate(action)            }            "New" -> {                val action = ExamFragmentDirections.actionExamFragmentToExamNewFragment()                findNavController().navigate(action)            }        }        exams.clear()        examAdapter.notifyDataSetChanged()    }    private fun initRecyclerAndAdapter() {        binding.apply {            recyclerTest.setHasFixedSize(true)            recyclerTest.adapter = examAdapter            recyclerTest.layoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)        }    }    private fun observeGroupDataState() {        viewModel.groupsDataState.observe(viewLifecycleOwner) {            when (it) {                is DataState.Loading -> {                    binding.apply {                        spinnerTestDepartment.isEnabled = false                        aviTestSpinnerDepartment.isVisible = true                        txtTestSpinnerDepartment.isVisible = false                    }                }                is DataState.Success -> {                    groups = it.data as ArrayList<DeservedGroup>                    if (groups.size > 0) {                        binding.apply {                            spinnerTestDepartment.isEnabled = true                            aviTestSpinnerDepartment.isVisible = false                            txtTestSpinnerDepartment.isVisible = false                        }                    } else {                        binding.apply {                            spinnerTestDepartment.isEnabled = false                            aviTestSpinnerDepartment.isVisible = false                            txtTestSpinnerDepartment.isVisible = true                        }                    }                    val adapterGroup = DeservedGroupsSpinnerAdapter(requireContext(), groups)                    binding.spinnerTestDepartment.adapter = adapterGroup                    viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                }                is DataState.Failure -> {                    groups.clear()                    groupId = -1                    val adapterGroup = DeservedGroupsSpinnerAdapter(requireContext(), groups)                    binding.spinnerTestDepartment.adapter = adapterGroup                    binding.apply {                        spinnerTestDepartment.isEnabled = false                        aviTestSpinnerDepartment.isVisible = false                        txtTestSpinnerDepartment.isVisible = true                    }                    viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                }                is DataState.ExceptionState -> {                    groups.clear()                    groupId = -1                    binding.apply {                        spinnerTestDepartment.isEnabled = false                        aviTestSpinnerDepartment.isVisible = false                        txtTestSpinnerDepartment.isVisible = true                        txtTestSpinnerDepartment.text = getString(R.string.strThereIsProblem)                    }                    viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                }            }        }    }    private fun observeExamDataState() {        viewModel.examsDataState.observe(viewLifecycleOwner) {            when (it) {                is DataState.Loading -> {                    binding.apply {                        swipeRefreshTest.isRefreshing = true                        shimmerAnimationTest.isVisible = true                        recyclerTest.isVisible = false                        imgExamChooseGroup.isVisible = true                    }                }                is DataState.Success -> {                    exams = it.data as ArrayList<Exam>                    binding.apply {                        swipeRefreshTest.isRefreshing = false                        shimmerAnimationTest.isVisible = false                        recyclerTest.isVisible = true                        imgExamChooseGroup.isVisible = false                    }                    examAdapter.setData(exams)                    viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                }                is DataState.Failure -> {                    binding.apply {                        swipeRefreshTest.isRefreshing = false                        shimmerAnimationTest.isVisible = false                        recyclerTest.isVisible = false                        imgExamChooseGroup.isVisible = true                    }                    viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                }                is DataState.ExceptionState -> {                    binding.apply {                        swipeRefreshTest.isRefreshing = false                        shimmerAnimationTest.isVisible = false                        recyclerTest.isVisible = false                        imgExamChooseGroup.isVisible = true                    }                    viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                }            }        }    }    private fun setYear(nowYear: String) {        years.clear()        for (i in nowYear.toInt() downTo 2019) {            years.add("$i")        }    }}