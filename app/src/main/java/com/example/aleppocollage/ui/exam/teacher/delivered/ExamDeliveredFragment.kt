package com.example.aleppocollage.ui.exam.teacher.deliveredimport android.os.Bundleimport androidx.fragment.app.Fragmentimport android.view.Viewimport androidx.core.view.isVisibleimport androidx.fragment.app.activityViewModelsimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport androidx.navigation.fragment.navArgsimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentExamDeliveredBindingimport com.example.aleppocollage.ui.main.model.ProfileInfoimport com.example.aleppocollage.ui.util.sharedviewmodel.SharedViewModelimport com.example.aleppocollage.util.Commonimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass ExamDeliveredFragment : Fragment(R.layout.fragment_exam_delivered) {    ///region Variables    private val args: ExamDeliveredFragmentArgs by navArgs()    //endregion    ///region ViewModel & Binding    private val viewModel: ExamDeliveredViewModel by viewModels()    private val sharedViewModel: SharedViewModel by activityViewModels()    private var _binding: FragmentExamDeliveredBinding? = null    private val binding get() = _binding!!    ///endregion    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        _binding = FragmentExamDeliveredBinding.bind(view)        init()        binding.apply {            txtDeliveredExamMaxMark.text = args.exam.maxMark.toString()            txtDeliveredExamMaxMark.text = args.exam.description            imgDeliveredExamDescription.setOnClickListener {            }            imgDeliveredExamMaxMark.setOnClickListener {            }            btnDeliveredExamEnterMark.setOnClickListener {            }            cardDeliveredExamBack.setOnClickListener {                findNavController().navigateUp()            }            cardDeliveredExamProfile.setOnClickListener {                val state = !(sharedViewModel.showProfileInfo.value!!.state)                sharedViewModel.showProfileInfo.value = ProfileInfo(userType = Common.getCurrentTypeUser(), teacher = Common.getCurrentTeacher()!!, state = state)            }        }    }    private fun init() {        observeExamDataState()        viewModel.setStateEvent(            DeliveredExamStateEvent.GroupStudent,            groupId = args.groupId,            examTableId = args.exam.id        )    }    private fun observeExamDataState() {        viewModel.groupStudentsDataState.observe(viewLifecycleOwner) {            when (it) {                is DataState.Loading -> {                    binding.apply {                        swipeRefreshDeliveredExam.isRefreshing = true                        linearDeliveredExamInformation.isVisible = false                        linearDeliveredExamNotFoundData.isVisible = false                    }                }                is DataState.Success -> {                    binding.apply {                        txtDeliveredExamDate.text = args.exam.date                        txtDeliveredExamNumberOfStudent.text = it.data.size.toString()                        txtDeliveredExamNumberOfStudentTrue.text = it.data.size.toString()                        txtDeliveredExamNumberOfStudentFalse.text = "0"                        txtDeliveredExamNumberOfStudentPresent.text = it.data.size.toString()                        txtDeliveredExamNumberOfStudentAttendance.text = "0"                        swipeRefreshDeliveredExam.isRefreshing = false                        linearDeliveredExamInformation.isVisible = true                        linearDeliveredExamNotFoundData.isVisible = false                    }                    viewModel.setStateEvent(DeliveredExamStateEvent.None)                }                is DataState.Failure -> {                    binding.apply {                        swipeRefreshDeliveredExam.isRefreshing = false                        linearDeliveredExamInformation.isVisible = false                        linearDeliveredExamNotFoundData.isVisible = true                    }                    viewModel.setStateEvent(DeliveredExamStateEvent.None)                }                is DataState.ExceptionState -> {                    binding.apply {                        swipeRefreshDeliveredExam.isRefreshing = false                        linearDeliveredExamInformation.isVisible = false                        linearDeliveredExamNotFoundData.isVisible = false                    }                    Common.showSnackBar(requireContext(), binding.root, "$it")                    viewModel.setStateEvent(DeliveredExamStateEvent.None)                }            }        }    }}