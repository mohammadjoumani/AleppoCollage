package com.example.aleppocollage.ui.markStudentimport androidx.hilt.lifecycle.ViewModelInjectimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.mark.domain.Markimport com.example.aleppocollage.repository.mark.MarkRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass MarkViewModel @ViewModelInject constructor(    private val markRepository : MarkRepository) : ViewModel() {    private var marks: ArrayList<Mark> = ArrayList()    private val _markStudents = MutableLiveData<Resource<ArrayList<Mark>>>()    val markStudents: LiveData<Resource<ArrayList<Mark>>> = _markStudents    fun getMarkStudent(studentID: Int, groupID: Int, month: Int, studyYear: String) {        viewModelScope.launch {            marks.clear()            markRepository.getMarkStudent(studentID, groupID, month, studyYear)                .onStart {                    _markStudents.postValue(Resource.Loading(true))                }                .catch {                    it.message?.let { message ->                        _markStudents.postValue(Resource.Error(message))                    }                }                .collect { _mark ->                    if (_mark == null) {                        _markStudents.postValue(Resource.FAILURE("name or password"))                    } else {                        marks.add(_mark)                    }                    _markStudents.postValue(Resource.Success(marks))                }        }    }}