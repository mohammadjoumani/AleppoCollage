package com.example.aleppocollage.ui.notificationimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.notification.domain.Notificationimport com.example.aleppocollage.repository.notification.NotificationRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass NotificationViewModel : ViewModel() {    private val notificationRepository = NotificationRepository()    private var notificationList: ArrayList<Notification> = ArrayList()    var notifications: MutableLiveData<Resource<ArrayList<Notification>>>? = null    fun getNotification(flag: Int, studentID: Int, groupID: Int, teacherID: Int) =        viewModelScope.launch {            notifications = MutableLiveData()            notificationList.clear()            notificationRepository.getNotifications(flag, studentID, groupID, teacherID).onStart {                notifications!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    notifications!!.postValue(Resource.Error(message))                }            }.collect { _notification ->                if (_notification == null) {                    notifications!!.postValue(Resource.FAILURE("name or password"))                } else {                    notificationList.add(_notification)                }                notifications!!.postValue(Resource.Success(notificationList))            }        }}