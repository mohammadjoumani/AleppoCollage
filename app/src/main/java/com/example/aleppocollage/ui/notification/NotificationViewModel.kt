package com.example.aleppocollage.ui.notificationimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.notification.domain.Notificationimport com.example.aleppocollage.repository.notification.NotificationRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass NotificationViewModel  @Inject constructor(    private val repository: NotificationRepository,): ViewModel() {    var notificationsDataState: MutableLiveData<DataState<List<Notification>>> = MutableLiveData()    fun setStateEvent(        notificationStateEvent: NotificationStateEvent,        flag: Int? = null, studentID: Int? = null, groupID: Int? = null, teacherID: Int? = null    ) {        viewModelScope.launch {            when (notificationStateEvent) {                is NotificationStateEvent.Notification -> {                    repository.getNotifications(flag!!, studentID!!, groupID!!, teacherID!!).onEach { dataState ->                        notificationsDataState.value = dataState                    }.launchIn(viewModelScope)                }                is NotificationStateEvent.None -> {                    notificationsDataState = MutableLiveData()                }            }        }    }}sealed class NotificationStateEvent {    object Notification : NotificationStateEvent()    object None : NotificationStateEvent()}