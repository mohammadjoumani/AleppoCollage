package com.example.aleppocollage.ui.notificationimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.notification.domain.Notificationimport com.example.aleppocollage.repository.notification.NotificationRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass NotificationViewModel : ViewModel() {    private val notificationRepository = NotificationRepository()    private var notificationList: ArrayList<Notification> = ArrayList()    private val _notifications = MutableLiveData<Resource<ArrayList<Notification>>>()    val notifications: LiveData<Resource<ArrayList<Notification>>> = _notifications    fun getNotification(flag: Int, studentID: Int,groupID:Int,teacherID:Int) {        viewModelScope.launch {            notificationList.clear()            notificationRepository.getNotifications(flag, studentID,groupID,teacherID)                .onStart {                    _notifications.postValue(Resource.Loading(true))                }                .catch {                    it.message?.let { message ->                        _notifications.postValue(Resource.Error(message))                    }                }                .collect { _notification ->                    if (_notification == null) {                        _notifications.postValue(Resource.FAILURE("name or password"))                    } else {                        notificationList.add(_notification)                    }                    _notifications.postValue(Resource.Success(notificationList))                }        }    }}