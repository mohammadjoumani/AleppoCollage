package com.example.aleppocollage.ui.absenceteacherimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.absence.domain.Absenceimport com.example.aleppocollage.model.test.domain.DeservedGroupimport com.example.aleppocollage.repository.absence.AbsenceRepositoryimport com.example.aleppocollage.repository.test.TestRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass AbsenceTeacherViewModel : ViewModel() {    private val absenceRepository = AbsenceRepository()    private var absenceGroupList: ArrayList<Absence> = ArrayList()    var absenceGroup : MutableLiveData<Resource<ArrayList<Absence>>>? =null    private val testRepository = TestRepository()    var deservedGroup : MutableLiveData<Resource<ArrayList<DeservedGroup>>>? =null    private val groupList = ArrayList<DeservedGroup>()    fun getGroupAbsenceSelect(groupID: Int, date: String) = viewModelScope.launch {        absenceGroup= MutableLiveData()        absenceGroupList.clear()        absenceRepository.getGroupAbsenceSelect(groupID, date).onStart {            absenceGroup!!.postValue(Resource.Loading(true))        }.catch {            it.message?.let { message ->                absenceGroup!!.postValue(Resource.Error(message))            }        }.collect {            Log.d("state2", it!!.student)            if (it == null) {                absenceGroup!!.postValue(Resource.FAILURE("Problem data"))            } else {                absenceGroupList.add(it)            }            absenceGroup!!.postValue(Resource.Success(absenceGroupList))        }    }    fun getDeservedGroup(studyYear: String, teacherID: Int) = viewModelScope.launch {        deservedGroup= MutableLiveData()        groupList.clear()        testRepository.getDeservedGroups(studyYear, teacherID).onStart {            deservedGroup!!.postValue(Resource.Loading(true))        }.catch {            it.message?.let { message ->                deservedGroup!!.postValue(Resource.Error(message))            }        }.collect {            if (it == null) {                deservedGroup!!.postValue(Resource.FAILURE("name or password"))            } else {                groupList.add(it)            }            deservedGroup!!.postValue(Resource.Success(groupList))        }    }}