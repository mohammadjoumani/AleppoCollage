package com.example.aleppocollage.ui.absenceteacherimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.absence.domain.Absenceimport com.example.aleppocollage.model.test.domain.DeservedGroupimport com.example.aleppocollage.repository.absence.AbsenceRepositoryimport com.example.aleppocollage.repository.test.TestRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass AbsenceTeacherViewModel : ViewModel() {    private val absenceRepository = AbsenceRepository()    private var absenceGroupList: ArrayList<Absence> = ArrayList()    private val _absenceGroup = MutableLiveData<Resource<ArrayList<Absence>>>()    val absenceGroup: LiveData<Resource<ArrayList<Absence>>> = _absenceGroup    private val testRepository = TestRepository()    private val _deservedGroup = MutableLiveData<Resource<ArrayList<DeservedGroup>>>()    val deservedGroup: LiveData<Resource<ArrayList<DeservedGroup>>> = _deservedGroup    private val groupList = ArrayList<DeservedGroup>()    fun getGroupAbsenceSelect(groupID: Int, date: String) = viewModelScope.launch {        absenceGroupList.clear()        absenceRepository.getGroupAbsenceSelect(groupID, date).onStart {                _absenceGroup.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    _absenceGroup.postValue(Resource.Error(message))                }            }.collect {                Log.d("state2", it!!.student)                if (it == null) {                    _absenceGroup.postValue(Resource.FAILURE("Problem data"))                } else {                    absenceGroupList.add(it)                }                _absenceGroup.postValue(Resource.Success(absenceGroupList))            }    }    fun getDeservedGroup(studyYear: String, teacherID: Int) = viewModelScope.launch {        groupList.clear()        testRepository.getDeservedGroups(studyYear, teacherID).onStart {                _deservedGroup.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    _deservedGroup.postValue(Resource.Error(message))                }            }.collect {                if (it == null) {                    _deservedGroup.postValue(Resource.FAILURE("name or password"))                } else {                    groupList.add(it)                }                _deservedGroup.postValue(Resource.Success(groupList))            }    }}