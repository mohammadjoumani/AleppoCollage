package com.example.aleppocollage.ui.attendance.teacher.setimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.attendance.domain.Attendanceimport com.example.aleppocollage.model.deservedgroup.domain.DeservedGroupimport com.example.aleppocollage.repository.attendance.AttendanceRepositoryimport com.example.aleppocollage.repository.deservedgroup.DeservedGroupRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass SetAttendanceTeacherViewModel @Inject constructor(    private val repository: AttendanceRepository,) : ViewModel() {    var attendancesDataState: MutableLiveData<DataState<List<Attendance>>> = MutableLiveData()    var setAttendancesDataState: MutableLiveData<DataState<String>> = MutableLiveData()    fun setGetAttendanceStateEvent(setAttendanceTeacherStateEvent: SetAttendanceTeacherStateEvent, groupId:Int? = null, date: String? = null ) {        viewModelScope.launch {            when (setAttendanceTeacherStateEvent) {                is SetAttendanceTeacherStateEvent.Attendance -> {                    repository.getGroupAttendanceSelect(groupId!!, date!!).onEach { dataState ->                        attendancesDataState.value = dataState                    }.launchIn(viewModelScope)                }                is SetAttendanceTeacherStateEvent.NoneAttendance -> {                    attendancesDataState = MutableLiveData()                }            }        }    }    fun setAttendanceStateEvent(setAttendanceTeacherStateEvent: SetAttendanceTeacherStateEvent, attendances: List<Attendance>? = null) {        viewModelScope.launch {            when (setAttendanceTeacherStateEvent) {                is SetAttendanceTeacherStateEvent.SetAttendance -> {                    repository.setAttendanceStudent(attendances!!).onEach { dataState ->                        setAttendancesDataState.value = dataState                    }.launchIn(viewModelScope)                }                is SetAttendanceTeacherStateEvent.NoneSetAttendance -> {                    setAttendancesDataState = MutableLiveData()                }            }        }    }}sealed class SetAttendanceTeacherStateEvent {    object Attendance : SetAttendanceTeacherStateEvent()    object SetAttendance : SetAttendanceTeacherStateEvent()    object NoneAttendance : SetAttendanceTeacherStateEvent()    object NoneSetAttendance : SetAttendanceTeacherStateEvent()}