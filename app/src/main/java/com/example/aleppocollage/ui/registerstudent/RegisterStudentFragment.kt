@file:Suppress("DEPRECATION")package com.example.aleppocollage.ui.registerstudentimport android.app.Activityimport android.content.Contextimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.view.inputmethod.InputMethodManagerimport android.widget.Toastimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.lifecycle.Observerimport androidx.navigation.fragment.findNavControllerimport com.example.aleppocollage.MainActivityimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentRegisterStudentBindingimport com.example.aleppocollage.ui.loading.LoadingDialogimport com.example.aleppocollage.util.Statusimport es.dmoral.toasty.Toastyimport io.paperdb.Paper@Suppress("DEPRECATION")class RegisterStudentFragment : Fragment() {    private val registerStudentViewModel by viewModels<RegisterStudentViewModel>()    private var _binding: FragmentRegisterStudentBinding? = null    private val binding get() = _binding!!    companion object {        val loadingDialog = LoadingDialog()    }    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        _binding = FragmentRegisterStudentBinding.inflate(inflater, container, false)        val view = binding.root        binding.btnRegisterStudentBack.setOnClickListener {            findNavController().popBackStack()        }        binding.btnRegisterStudentLogin.setOnClickListener {            val name = binding.edtRegisterStudentName.text.toString().trim()            val password = binding.edtRegisterStudentPassword.text.toString().trim()            if (name == "") {                binding.edtRegisterStudentName.error = getString(R.string.pleaseEnterName)                return@setOnClickListener            }            if (password == "") {                binding.edtRegisterStudentPassword.error = getString(R.string.pleaseEnterPassword)                return@setOnClickListener            }            activity?.let { it1 -> hideKeyboard(it1) }            getOneStudent(name, password)        }        return view    }    private fun getOneStudent(name: String, password: String) {        registerStudentViewModel.getOneStudent(name, password)        registerStudentViewModel.studentResult?.observe(viewLifecycleOwner, Observer {            when (it.status) {                Status.LOADING -> {                    Log.d("state", "LOADING")                    loadingDialog.show(                        (activity as MainActivity).supportFragmentManager, "LoadingDialog")                }                Status.SUCCESS -> {                    Log.d("state", "SUCCESS")                    Paper.book().write("typeUser", 1)                    Paper.book().write("Student", it._data)                    Paper.book().write("oneTime", false)                    val action = RegisterStudentFragmentDirections.actionNavigationRegisterStudentToWorkStudentOrTeacherFragment()                    findNavController().navigate(action)                    loadingDialog.dismiss()                    Toasty.success(activity as MainActivity, "Success!", Toast.LENGTH_SHORT, true).show()                    (activity as MainActivity).setHomeScreen(R.id.workStudentOrTeacherFragment)                }                Status.FAILURE -> {                    Log.d("state", "Failure")                    binding.edtRegisterStudentName.setText("")                    binding.edtRegisterStudentPassword.setText("")                    loadingDialog.dismiss()                    Toasty.error(                        activity as MainActivity, "${it.message}", Toast.LENGTH_SHORT, true).show()                }                Status.ERROR -> {                    Log.d("state", "ERROR")                }            }        })    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }    private fun hideKeyboard(activity: Activity) {        val inputManager = activity            .getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager        val currentFocusedView = activity.currentFocus        if (currentFocusedView != null) {            inputManager.hideSoftInputFromWindow(                currentFocusedView.windowToken,                InputMethodManager.HIDE_NOT_ALWAYS            )        }    }}