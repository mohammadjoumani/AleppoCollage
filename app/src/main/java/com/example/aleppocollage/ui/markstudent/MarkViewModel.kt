package com.example.aleppocollage.ui.markstudentimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.mark.domain.Markimport com.example.aleppocollage.repository.mark.MarkRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchimport java.util.*class MarkViewModel : ViewModel() {    private val markRepository = MarkRepository()    private var marks: ArrayList<Mark> = ArrayList()    var markStudents: MutableLiveData<Resource<ArrayList<Mark>>>? = null    fun getMarkStudent(studentID: Int, groupID: Int, month: Int, studyYear: String) =        viewModelScope.launch {            markStudents = MutableLiveData()            marks.clear()            markRepository.getMarkStudent(studentID, groupID, month, studyYear).onStart {                markStudents!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    markStudents!!.postValue(Resource.Error(message))                }            }.collect { _mark ->                if (_mark == null) {                    markStudents!!.postValue(Resource.FAILURE("name or password"))                } else {                    marks.add(_mark)                }                markStudents!!.postValue(Resource.Success(marks))            }        }}