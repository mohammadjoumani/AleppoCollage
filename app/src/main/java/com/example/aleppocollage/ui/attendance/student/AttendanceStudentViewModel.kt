package com.example.aleppocollage.ui.attendance.studentimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.attendance.domain.Attendanceimport com.example.aleppocollage.repository.attendance.AttendanceRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.*import kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass AttendanceStudentViewModel @Inject constructor(    private val repository: AttendanceRepository,)  : ViewModel() {    var attendanceDataState: MutableLiveData<DataState<Attendance>> = MutableLiveData()    fun setStateEvent(attendanceStudentStateEvent: AttendanceStudentStateEvent, studentId: Int? = null, date: String? = null) {        viewModelScope.launch {            when (attendanceStudentStateEvent) {                is AttendanceStudentStateEvent.Attendacne -> {                    repository.getAttendanceStudent(studentId!!, date!!).onEach { dataState ->                        attendanceDataState.value = dataState                    }.launchIn(viewModelScope)                }                is AttendanceStudentStateEvent.None -> {                    attendanceDataState = MutableLiveData()                }            }        }    }}sealed class AttendanceStudentStateEvent {    object Attendacne : AttendanceStudentStateEvent()    object None : AttendanceStudentStateEvent()}