package com.example.aleppocollage.ui.absencestudentimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.absence.domain.Absenceimport com.example.aleppocollage.repository.absence.AbsenceRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass AbsenceStudentViewModel : ViewModel() {    private val absenceRepository = AbsenceRepository()    var absenceStudent: MutableLiveData<Resource<Absence>>? = null    fun getAbsenceStudent(studentID: Int, date: String) = viewModelScope.launch {        absenceStudent= MutableLiveData()        absenceRepository.getAbsenceStudent(studentID, date).onStart {                absenceStudent!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    absenceStudent!!.postValue(Resource.Error(message))                }            }.collect { _absence ->                if (_absence == null) {                    absenceStudent!!.postValue(Resource.FAILURE("name or password"))                } else {                    absenceStudent!!.postValue(Resource.Success(_absence))                }            }    }}