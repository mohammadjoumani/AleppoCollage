package com.example.aleppocollage.ui.exam.teacherimport android.os.Bundleimport androidx.fragment.app.Fragmentimport android.view.Viewimport android.widget.AdapterViewimport androidx.activity.OnBackPressedCallbackimport androidx.core.content.ContextCompatimport androidx.core.view.isVisibleimport androidx.fragment.app.activityViewModelsimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentExamBindingimport com.example.aleppocollage.model.deservedgroup.domain.DeservedGroupimport com.example.aleppocollage.model.exam.domain.Examimport com.example.aleppocollage.ui.mark.student.adapter.YearSpinnerAdapterimport com.example.aleppocollage.ui.exam.teacher.adapter.DeservedGroupsSpinnerAdapterimport com.example.aleppocollage.ui.exam.teacher.adapter.ExamRecyclerAdapterimport com.example.aleppocollage.ui.main.model.ProfileInfoimport com.example.aleppocollage.ui.util.sharedviewmodel.SharedViewModelimport com.example.aleppocollage.util.Commonimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.AndroidEntryPointimport java.util.*import kotlin.collections.ArrayList@AndroidEntryPointclass ExamFragment : Fragment(R.layout.fragment_exam) {    private val TAG = "ExamFragment"    ///region Variables    private var year = -1    private var groupId = -1    private var subjectId = -1    private var teacherId = -1    private var years: ArrayList<String> = ArrayList()    private var groups: ArrayList<DeservedGroup> = ArrayList()    private var exams: ArrayList<Exam> = ArrayList()    private lateinit var examAdapter: ExamRecyclerAdapter    //endregion    ///region ViewModel & Binding    private val viewModel: ExamViewModel by viewModels()    private val sharedViewModel: SharedViewModel by activityViewModels()    private var _binding: FragmentExamBinding? = null    private val binding get() = _binding!!    ///endregion    private lateinit var deservedGroupsSpinnerAdapter: DeservedGroupsSpinnerAdapter    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        _binding = FragmentExamBinding.bind(view)        init()        binding.apply {            swipeRefreshExam.setColorSchemeColors(                ContextCompat.getColor(                    requireContext(),                    R.color.colorPrimary))            swipeRefreshExam.setOnRefreshListener {                observeGroupDataState()                viewModel.setGroupStateEvent(ExamStateEvent.Group, teacherId, "$year-${year + 1}")            }            spinnerExamYear.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {                override fun onNothingSelected(adapterView: AdapterView<*>?) {                }                override fun onItemSelected(                    adapterView: AdapterView<*>?, view: View?, position: Int, id: Long) {                    year = years[position].toInt()                    observeGroupDataState()                    viewModel.setGroupStateEvent(                        ExamStateEvent.Group,                        teacherId,                        "$year-${year + 1}")                }            }            spinnerExamGroup.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {                override fun onNothingSelected(adapterView: AdapterView<*>?) {                }                override fun onItemSelected(                    adapterView: AdapterView<*>?, view: View?, position: Int, id: Long) {                    groupId = groups[position].id                    subjectId = groups[position].subjectID                }            }            btnExamRecordExam.setOnClickListener {                if (groupId == -1 || subjectId == -1) {                    Common.showToast(                        requireActivity(),                        getString(R.string.strShouldSelectYearAndGroup),                        "warning")                    return@setOnClickListener                }                observeExamDataState()                viewModel.setExamStateEvent(                    ExamStateEvent.Exam, subjectId = subjectId, groupId = groupId)            }            cardExamBack.setOnClickListener {                findNavController().navigateUp()            }            cardExamProfile.setOnClickListener {                val state = !(sharedViewModel.showProfileInfo.value!!.state)                sharedViewModel.showProfileInfo.value = ProfileInfo(                    userType = Common.getCurrentTypeUser(),                    teacher = Common.getCurrentTeacher()!!,                    state = state)            }        }        activity?.onBackPressedDispatcher?.addCallback(            viewLifecycleOwner,            object : OnBackPressedCallback(true) {                override fun handleOnBackPressed() {                    if (sharedViewModel.showProfileInfo.value!!.state) {                        sharedViewModel.showProfileInfo.value = ProfileInfo(                            userType = Common.getCurrentTypeUser(),                            teacher = Common.getCurrentTeacher()!!,                            state = false)                    } else {                        findNavController().navigateUp()                    }                }            })    }    private fun init() {        teacherId = Common.getCurrentTeacher()!!.id        setYear(Common.getCurrentYear())        val adapterYear = YearSpinnerAdapter(requireContext(), years)        binding.spinnerExamYear.adapter = adapterYear        deservedGroupsSpinnerAdapter = DeservedGroupsSpinnerAdapter(requireContext(), groups)        binding.spinnerExamGroup.adapter = deservedGroupsSpinnerAdapter        examAdapter = ExamRecyclerAdapter(exams, requireContext()) { exam -> clickExam(exam) }        initRecyclerAndAdapter()        observeVariables()    }    private fun clickExam(exam: Exam) {        when (exam.status) {            "Delivered" -> {//                val action = ExamFragmentDirections.actionExamFragmentToExamDeliveredFragment(exam, groupId)//                findNavController().navigate(action)            }            "Checked" -> {                val action =                    ExamFragmentDirections.actionExamFragmentToMarkTeacherFragment(groupId, exam)                findNavController().navigate(action)            }            "New" -> {                val action = ExamFragmentDirections.actionExamFragmentToMaxMarkFragment(exam)                findNavController().navigate(action)            }        }        exams.clear()        examAdapter.notifyDataSetChanged()    }    private fun initRecyclerAndAdapter() {        binding.apply {            recyclerExam.setHasFixedSize(true)            recyclerExam.adapter = examAdapter            recyclerExam.layoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)        }    }    private fun observeGroupDataState() {        viewModel.groupsDataState.observe(viewLifecycleOwner) {            binding.apply {                when (it) {                    is DataState.Loading -> {                        spinnerExamGroup.isEnabled = false                        aviExamSpinnerGroup.isVisible = true                        txtExamSpinnerGroup.isVisible = false                    }                    is DataState.Success -> {                        groups = it.data as ArrayList<DeservedGroup>                        swipeRefreshExam.isRefreshing = false                        if (groups.size > 0) {                                deservedGroupsSpinnerAdapter =                                    DeservedGroupsSpinnerAdapter(requireContext(), groups)                                spinnerExamGroup.adapter = deservedGroupsSpinnerAdapter                                spinnerExamGroup.isEnabled = true                                aviExamSpinnerGroup.isVisible = false                                txtExamSpinnerGroup.isVisible = false                            } else {                                spinnerExamGroup.isEnabled = false                                aviExamSpinnerGroup.isVisible = false                                txtExamSpinnerGroup.isVisible = true                            }                        viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                    }                    is DataState.Failure -> {                        groups.clear()                        groupId = -1                        deservedGroupsSpinnerAdapter.clear()                        swipeRefreshExam.isRefreshing = false                        spinnerExamGroup.isEnabled = false                        aviExamSpinnerGroup.isVisible = false                        txtExamSpinnerGroup.isVisible = true                        txtExamSpinnerGroup.text = getString(R.string.strThereIsNotGroups)                        viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                    }                    is DataState.ExceptionState -> {                        groups.clear()                        groupId = -1                        deservedGroupsSpinnerAdapter.clear()                        swipeRefreshExam.isRefreshing = false                        spinnerExamGroup.isEnabled = false                        aviExamSpinnerGroup.isVisible = false                        txtExamSpinnerGroup.isVisible = true                        txtExamSpinnerGroup.text = getString(R.string.strThereIsNotGroups)                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                    }                    is DataState.Connection -> {                        groups.clear()                        groupId = -1                        deservedGroupsSpinnerAdapter.clear()                        swipeRefreshExam.isRefreshing = false                        spinnerExamGroup.isEnabled = false                        aviExamSpinnerGroup.isVisible = false                        txtExamSpinnerGroup.isVisible = true                        txtExamSpinnerGroup.text = getString(R.string.strThereIsNotGroups)                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setGroupStateEvent(ExamStateEvent.NoneGroup)                    }                }            }        }    }    private fun observeExamDataState() {        viewModel.examsDataState.observe(viewLifecycleOwner) {            binding.apply {                when (it) {                    is DataState.Loading -> {                        imgExamChooseGroup.isVisible = false                        swipeRefreshExam.isRefreshing = true                        shimmerAnimationExam.isVisible = true                        recyclerExam.isVisible = false                    }                    is DataState.Success -> {                        exams = it.data as ArrayList<Exam>                        imgExamChooseGroup.isVisible = false                        swipeRefreshExam.isRefreshing = false                        shimmerAnimationExam.isVisible = false                        recyclerExam.isVisible = true                        examAdapter.setData(exams)                        viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                    }                    is DataState.Failure -> {                        imgExamChooseGroup.isVisible = true                        swipeRefreshExam.isRefreshing = false                        shimmerAnimationExam.isVisible = false                        recyclerExam.isVisible = false                        Common.showToast(requireActivity(), getString(R.string.strNotFoundData), "error")                        viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                    }                    is DataState.ExceptionState -> {                        imgExamChooseGroup.isVisible = true                        swipeRefreshExam.isRefreshing = false                        shimmerAnimationExam.isVisible = false                        recyclerExam.isVisible = false                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                    }                    is DataState.Connection -> {                        imgExamChooseGroup.isVisible = true                        swipeRefreshExam.isRefreshing = false                        shimmerAnimationExam.isVisible = false                        recyclerExam.isVisible = false                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setExamStateEvent(ExamStateEvent.NoneExam)                    }                }            }        }    }    private fun setYear(nowYear: String) {        years.clear()        for (i in nowYear.toInt() downTo 2019) {            years.add("$i")        }    }    private fun observeVariables() {    }    override fun onDestroy() {        super.onDestroy()        _binding = null    }}