package com.example.aleppocollage.ui.payment.teacherimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.payment.domain.Paymentimport com.example.aleppocollage.repository.payment.PaymentRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.*import kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass PaymentTeacherViewModel  @Inject constructor(    private val repository: PaymentRepository,) : ViewModel() {    var paymentsDataState: MutableLiveData<DataState<List<Payment>>> = MutableLiveData()    var costDataState: MutableLiveData<DataState<Int>> = MutableLiveData()    fun setPaymentStateEvent(paymentTeacherStateEvent: PaymentTeacherStateEvent,teacherId: Int? = null, year: String? = null) {        viewModelScope.launch {            when (paymentTeacherStateEvent) {                is PaymentTeacherStateEvent.Payment -> {                    repository.getPaymentTeacher(teacherId!!, year!!).onEach { dataState ->                        paymentsDataState.value = dataState                    }.launchIn(viewModelScope)                }                is PaymentTeacherStateEvent.NonePayment -> {                    paymentsDataState = MutableLiveData()                }            }        }    }    fun setCostStateEvent(paymentTeacherStateEvent: PaymentTeacherStateEvent,teacherId: Int? = null, groupId: Int? = null, year: String? = null) {        viewModelScope.launch {            when (paymentTeacherStateEvent) {                is PaymentTeacherStateEvent.Cost -> {                    repository.getCostTeacher(teacherId!!, groupId!!, year!!).onEach { dataState ->                        costDataState.value = dataState                    }.launchIn(viewModelScope)                }                is PaymentTeacherStateEvent.NoneCost -> {                    costDataState = MutableLiveData()                }            }        }    }}sealed class PaymentTeacherStateEvent {    object Payment : PaymentTeacherStateEvent()    object Cost : PaymentTeacherStateEvent()    object NonePayment : PaymentTeacherStateEvent()    object NoneCost : PaymentTeacherStateEvent()}