package com.example.aleppocollage.ui.paymentimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.mark.domain.Markimport com.example.aleppocollage.model.payment.domain.Paymentimport com.example.aleppocollage.repository.mark.MarkRepositoryimport com.example.aleppocollage.repository.payment.PaymentRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass PaymentViewModel : ViewModel() {    private val paymentRepository = PaymentRepository()    private var payments: ArrayList<Payment> = ArrayList()    private val _payStudent = MutableLiveData<Resource<ArrayList<Payment>>>()    val payStudent: LiveData<Resource<ArrayList<Payment>>> = _payStudent    private val _cost = MutableLiveData<Resource<Int>>()    val cost: LiveData<Resource<Int>> = _cost    fun getPayStudent(studentID: Int, studyYear: String) = viewModelScope.launch {        payments.clear()        paymentRepository.getPaymentStudent(studentID, studyYear)            .onStart {                _payStudent.postValue(Resource.Loading(true))            }            .catch {                it.message?.let { message ->                    _payStudent.postValue(Resource.Error(message))                }            }            .collect { _pay ->                if (_pay == null) {                    _payStudent.postValue(Resource.FAILURE("name or password"))                } else {                    payments.add(_pay)                }                _payStudent.postValue(Resource.Success(payments))            }    }    fun getPayTeacher(teacherID: Int, studyYear: String) = viewModelScope.launch {        payments.clear()        paymentRepository.getPaymentTeacher(teacherID, studyYear)            .onStart {                _payStudent.postValue(Resource.Loading(true))            }            .catch {                it.message?.let { message ->                    _payStudent.postValue(Resource.Error(message))                }            }            .collect { _pay ->                if (_pay == null) {                    _payStudent.postValue(Resource.FAILURE("name or password"))                } else {                    payments.add(_pay)                }                _payStudent.postValue(Resource.Success(payments))            }    }    fun getCostStudent(studentID: Int, groupID: Int) = viewModelScope.launch {        paymentRepository.getCostStudent(studentID, groupID)            .onStart {                _cost.postValue(Resource.Loading(true))            }            .catch {                it.message?.let { message ->                    _cost.postValue(Resource.Error(message))                }            }            .collect {                if (it == -1) {                    _cost.postValue(Resource.FAILURE("name or password"))                } else {                    _cost.postValue(Resource.Success(it))                }            }    }    fun getCostTeacher(teacherID: Int, groupID: Int, studyYear: String) = viewModelScope.launch {        paymentRepository.getCostTeacher(teacherID, groupID, studyYear)            .onStart {                _cost.postValue(Resource.Loading(true))            }            .catch {                it.message?.let { message ->                    _cost.postValue(Resource.Error(message))                }            }            .collect {                if (it == -1) {                    _cost.postValue(Resource.FAILURE("name or password"))                } else {                    _cost.postValue(Resource.Success(it))                }            }    }}