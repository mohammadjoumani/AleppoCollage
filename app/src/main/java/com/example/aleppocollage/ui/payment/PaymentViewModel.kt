package com.example.aleppocollage.ui.paymentimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.payment.domain.Paymentimport com.example.aleppocollage.repository.payment.PaymentRepositoryimport com.example.aleppocollage.util.Resourceimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.onStartimport kotlinx.coroutines.launchclass PaymentViewModel : ViewModel() {    private val paymentRepository = PaymentRepository()    private var payments: ArrayList<Payment> = ArrayList()    var payStudent: MutableLiveData<Resource<ArrayList<Payment>>>? = null    var cost: MutableLiveData<Resource<Int>>? = null    fun getPayStudent(studentID: Int, studyYear: String) = viewModelScope.launch {        payStudent = MutableLiveData()        payments.clear()        paymentRepository.getPaymentStudent(studentID, studyYear).onStart {                payStudent!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    payStudent!!.postValue(Resource.Error(message))                }            }.collect { _pay ->                if (_pay == null) {                    payStudent!!.postValue(Resource.FAILURE("name or password"))                } else {                    payments.add(_pay)                }                payStudent!!.postValue(Resource.Success(payments))            }    }    fun getPayTeacher(teacherID: Int, studyYear: String) = viewModelScope.launch {        payStudent = MutableLiveData()        payments.clear()        paymentRepository.getPaymentTeacher(teacherID, studyYear).onStart {                payStudent!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    payStudent!!.postValue(Resource.Error(message))                }            }.collect { _pay ->                if (_pay == null) {                    payStudent!!.postValue(Resource.FAILURE("name or password"))                } else {                    payments.add(_pay)                }                payStudent!!.postValue(Resource.Success(payments))            }    }    fun getCostStudent(studentID: Int, groupID: Int) = viewModelScope.launch {        cost = MutableLiveData()        paymentRepository.getCostStudent(studentID, groupID).onStart {                cost!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    cost!!.postValue(Resource.Error(message))                }            }.collect {                if (it == -1) {                    cost!!.postValue(Resource.FAILURE("name or password"))                } else {                    cost!!.postValue(Resource.Success(it))                }            }    }    fun getCostTeacher(teacherID: Int, groupID: Int, studyYear: String) = viewModelScope.launch {        cost = MutableLiveData()        paymentRepository.getCostTeacher(teacherID, groupID, studyYear).onStart {                cost!!.postValue(Resource.Loading(true))            }.catch {                it.message?.let { message ->                    cost!!.postValue(Resource.Error(message))                }            }.collect {                if (it == -1) {                    cost!!.postValue(Resource.FAILURE("name or password"))                } else {                    cost!!.postValue(Resource.Success(it))                }            }    }}