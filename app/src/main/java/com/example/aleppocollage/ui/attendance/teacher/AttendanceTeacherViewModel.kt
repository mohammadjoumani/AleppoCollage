package com.example.aleppocollage.ui.attendance.teacherimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.aleppocollage.model.attendance.domain.Attendanceimport com.example.aleppocollage.model.deservedgroup.domain.DeservedGroupimport com.example.aleppocollage.repository.attendance.AttendanceRepositoryimport com.example.aleppocollage.repository.deservedgroup.DeservedGroupRepositoryimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.launchInimport kotlinx.coroutines.flow.onEachimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass AttendanceTeacherViewModel @Inject constructor(    private val repository: AttendanceRepository,    private val repositoryDeserved: DeservedGroupRepository,) : ViewModel() {    var stateCallback = MutableLiveData(false)    var groupsDataState: MutableLiveData<DataState<List<DeservedGroup>>> = MutableLiveData()    var attendancesDataState: MutableLiveData<DataState<List<Attendance>>> = MutableLiveData()    var setAttendancesDataState: MutableLiveData<DataState<String>> = MutableLiveData()    //get group student    fun setGroupStateEvent(attendanceTeacherStateEvent: AttendanceTeacherStateEvent, teacherId: Int? = null, year: String? = null ) {        viewModelScope.launch {            when (attendanceTeacherStateEvent) {                is AttendanceTeacherStateEvent.Group -> {                    repositoryDeserved.getDeservedGroups(year!!, teacherId!!).onEach { dataState ->                        groupsDataState.value = dataState                    }.launchIn(viewModelScope)                }                is AttendanceTeacherStateEvent.NoneGroup -> {                    groupsDataState = MutableLiveData()                }            }        }    }    //get Attendance    fun setAttendanceStateEvent(attendanceTeacherStateEvent: AttendanceTeacherStateEvent, groupId:Int? = null, date: String? = null ) {        viewModelScope.launch {            when (attendanceTeacherStateEvent) {                is AttendanceTeacherStateEvent.Attendance -> {                    repository.getGroupAttendanceSelect(groupId!!, date!!).onEach { dataState ->                        attendancesDataState.value = dataState                    }.launchIn(viewModelScope)                }                is AttendanceTeacherStateEvent.NoneAttendance -> {                    attendancesDataState = MutableLiveData()                }            }        }    }    //save Attendance    fun setAttendanceStateEvent(attendanceTeacherStateEvent: AttendanceTeacherStateEvent, attendances: List<Attendance>? = null, date: String) {        viewModelScope.launch {            when (attendanceTeacherStateEvent) {                is AttendanceTeacherStateEvent.SetAttendance -> {                    repository.setAttendanceStudent(attendances!!, date).onEach { dataState ->                        setAttendancesDataState.value = dataState                    }.launchIn(viewModelScope)                }                is AttendanceTeacherStateEvent.NoneSetAttendance -> {                    setAttendancesDataState = MutableLiveData()                }            }        }    }}sealed class AttendanceTeacherStateEvent {    object Attendance : AttendanceTeacherStateEvent()    object Group : AttendanceTeacherStateEvent()    object SetAttendance : AttendanceTeacherStateEvent()    object NoneSetAttendance : AttendanceTeacherStateEvent()    object NoneGroup : AttendanceTeacherStateEvent()    object NoneAttendance : AttendanceTeacherStateEvent()}