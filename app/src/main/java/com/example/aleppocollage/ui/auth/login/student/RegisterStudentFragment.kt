package com.example.aleppocollage.ui.auth.login.studentimport android.os.Bundleimport android.text.method.HideReturnsTransformationMethodimport android.text.method.PasswordTransformationMethodimport android.util.Logimport android.view.Viewimport android.widget.Toastimport androidx.core.view.isVisibleimport androidx.fragment.app.Fragmentimport androidx.fragment.app.activityViewModelsimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport com.example.aleppocollage.ui.main.MainActivityimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentRegisterStudentBindingimport com.example.aleppocollage.model.user.domain.Studentimport com.example.aleppocollage.ui.util.loading.LoadingViewModelimport com.example.aleppocollage.ui.util.sharedviewmodel.SharedViewModelimport com.example.aleppocollage.util.Commonimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.AndroidEntryPointimport es.dmoral.toasty.Toastyimport io.paperdb.Paper@AndroidEntryPointclass RegisterStudentFragment : Fragment(R.layout.fragment_register_student) {    ///region ViewModel & Binding    private val viewModel: RegisterStudentViewModel by viewModels()    private val sharedViewModel: SharedViewModel by activityViewModels()    private var _binding: FragmentRegisterStudentBinding? = null    private val binding get() = _binding!!    ///endregion    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        _binding = FragmentRegisterStudentBinding.bind(view)        init()        binding.apply {            btnRegisterStudentBack.setOnClickListener {                findNavController().navigateUp()            }            btnRegisterStudentLogin.setOnClickListener {                val name = binding.edtRegisterStudentName.text.toString().trim()                val password = binding.edtRegisterStudentPassword.text.toString().trim()                if (name.isEmpty()) {                    binding.edtRegisterStudentName.error = getString(R.string.strPleaseEnterName)                    return@setOnClickListener                }                if (password.isEmpty()) {                    binding.edtRegisterStudentPassword.error =                        getString(R.string.strPleaseEnterPassword)                    return@setOnClickListener                }                Common.hideKeyboard(activity as MainActivity)                observeStudentDataState()                viewModel.setStateEvent(RegisterStudentStateEvent.Register, name, password)            }            imgRegisterStudentShowPassword.setOnClickListener {                viewModel.showPassword.value = !(viewModel.showPassword.value)!!            }        }    }    private fun init() {        observeShowPassword()    }    private fun observeStudentDataState() {        viewModel.studentDataState.observe(viewLifecycleOwner) {            when (it) {                is DataState.Loading -> {                    binding.apply {                        aviRegisterStudent.isVisible = true                        btnRegisterStudentLogin.isVisible = false                    }                }                is DataState.Success -> {                    val accountInfo = it.data                    Common.storeCurrentUser(student = accountInfo)                    Toasty.success(requireContext(), "Success!", Toast.LENGTH_SHORT, true).show()                    val action = RegisterStudentFragmentDirections.actionRegisterStudentFragmentToHomeStudentFragment()                    findNavController().navigate(action)                    viewModel.setStateEvent(RegisterStudentStateEvent.None)                    sharedViewModel.stateStartApp.value = R.id.homeStudentFragment                }                is DataState.Failure -> {                    binding.apply {                        edtRegisterStudentName.setText("")                        edtRegisterStudentPassword.setText("")                        aviRegisterStudent.isVisible = false                        btnRegisterStudentLogin.isVisible = true                    }                    viewModel.setStateEvent(RegisterStudentStateEvent.None)                    Common.showSnackBar(requireContext(), binding.root, "$it")                }                is DataState.ExceptionState -> {                    binding.apply {                        aviRegisterStudent.isVisible = false                        btnRegisterStudentLogin.isVisible = true                    }                    viewModel.setStateEvent(RegisterStudentStateEvent.None)                    Common.showSnackBar(requireContext(), binding.root, "$it")                }            }        }    }    private fun observeShowPassword() {        viewModel.showPassword.observe(viewLifecycleOwner) {            binding.apply {                edtRegisterStudentPassword.transformationMethod =                    if (it!!) HideReturnsTransformationMethod() else PasswordTransformationMethod()                imgRegisterStudentShowPassword.setBackgroundResource(if (it) R.drawable.ic_visibility_on else R.drawable.ic_visibility_off)            }        }    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }}