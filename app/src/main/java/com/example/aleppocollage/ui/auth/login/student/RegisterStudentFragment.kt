package com.example.aleppocollage.ui.auth.login.studentimport android.os.Bundleimport android.text.method.HideReturnsTransformationMethodimport android.text.method.PasswordTransformationMethodimport android.view.Viewimport androidx.core.view.isVisibleimport androidx.fragment.app.Fragmentimport androidx.fragment.app.activityViewModelsimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport com.example.aleppocollage.ui.main.MainActivityimport com.example.aleppocollage.Rimport com.example.aleppocollage.databinding.FragmentRegisterStudentBindingimport com.example.aleppocollage.ui.util.sharedviewmodel.SharedViewModelimport com.example.aleppocollage.util.Commonimport com.example.aleppocollage.util.DataStateimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass RegisterStudentFragment : Fragment(R.layout.fragment_register_student) {    ///region ViewModel & Binding    private val viewModel: RegisterStudentViewModel by viewModels()    private val sharedViewModel: SharedViewModel by activityViewModels()    private var _binding: FragmentRegisterStudentBinding? = null    private val binding get() = _binding!!    ///endregion    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        _binding = FragmentRegisterStudentBinding.bind(view)        init()        binding.apply {            btnRegisterStudentBack.setOnClickListener {                findNavController().navigateUp()            }            btnRegisterStudentLogin.setOnClickListener {                val name = binding.edtRegisterStudentName.text.toString().trim()                val password = binding.edtRegisterStudentPassword.text.toString().trim()                if (name.isEmpty()) {                    Common.showToast(requireActivity(), getString(R.string.strPleaseEnterName), "warning")                    return@setOnClickListener                }                if (password.isEmpty()) {                    Common.showToast(requireActivity(), getString(R.string.strPleaseEnterPassword), "warning")                    return@setOnClickListener                }                Common.hideKeyboard(requireActivity())                observeStudentDataState()                viewModel.setStateEvent(RegisterStudentStateEvent.Register, name, password)            }            imgRegisterStudentShowPassword.setOnClickListener {                viewModel.showPassword.value = !(viewModel.showPassword.value)!!            }        }    }    private fun init() {        observeShowPassword()    }    private fun observeStudentDataState() {        viewModel.studentDataState.observe(viewLifecycleOwner) {            binding.apply {                when (it) {                    is DataState.Loading -> {                        aviRegisterStudent.isVisible = true                        btnRegisterStudentLogin.isVisible = false                    }                    is DataState.Success -> {                        val accountInfo = it.data                        Common.storeCurrentUser(student = accountInfo)                        Common.showToast(requireActivity(), "Success!", "success" )                        val action = RegisterStudentFragmentDirections.actionRegisterStudentFragmentToHomeStudentFragment()                        findNavController().navigate(action)                        viewModel.setStateEvent(RegisterStudentStateEvent.None)                        sharedViewModel.stateStartApp.value = R.id.homeStudentFragment                    }                    is DataState.Failure -> {//                        edtRegisterStudentName.setText("")//                        edtRegisterStudentPassword.setText("")                        aviRegisterStudent.isVisible = false                        btnRegisterStudentLogin.isVisible = true                        Common.showToast(requireActivity(), getString(R.string.strNameOrPasswordIsWrong),"error")                        viewModel.setStateEvent(RegisterStudentStateEvent.None)                    }                    is DataState.ExceptionState -> {                        aviRegisterStudent.isVisible = false                        btnRegisterStudentLogin.isVisible = true                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setStateEvent(RegisterStudentStateEvent.None)                    }                    is DataState.Connection -> {                        aviRegisterStudent.isVisible = false                        btnRegisterStudentLogin.isVisible = true                        Common.showSnackBar(requireContext(), binding.root, getString(R.string.strThereIsProblem))                        viewModel.setStateEvent(RegisterStudentStateEvent.None)                    }                }            }        }    }    private fun observeShowPassword() {        viewModel.showPassword.observe(viewLifecycleOwner) {            binding.apply {                edtRegisterStudentPassword.transformationMethod =                    if (it!!) HideReturnsTransformationMethod() else PasswordTransformationMethod()                imgRegisterStudentShowPassword.setBackgroundResource(if (it) R.drawable.ic_visibility_on else R.drawable.ic_visibility_off)            }        }    }    override fun onDestroyView() {        super.onDestroyView()        _binding = null    }}